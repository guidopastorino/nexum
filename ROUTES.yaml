# Rutas API para Nexum

## 1. Usuarios

- POST /api/users: Registra un nuevo usuario.
  - json: { fullname, email, username, password }

- GET /api/users/:id: Obtiene los detalles de un usuario específico.
  - Params: id (ID del usuario)

- PUT /api/users/:id: Actualiza información de perfil de un usuario.
  - Params: id (ID del usuario)
  - json: { fullname, bio, profileImage, bannerImage }

- POST /api/users/follow: Sigue a otro usuario.
  - json: { userId, followUserId }

- POST /api/users/unfollow: Deja de seguir a un usuario.
  - json: { userId, unfollowUserId }

## 2. Autenticación

- POST /api/auth/login: Inicia sesión en la aplicación.
  - json: { username, password }

- POST /api/auth/register: Registra un nuevo usuario (opcional si se hace en /api/users).
  - json: { fullname, email, username, password }

- POST /api/auth/logout: Cierra sesión.
  - json: { userId }

## 3. Posts

- POST /api/posts: Crea un nuevo post.
  - json: { content, files, userId }

- GET /api/posts/:id: Obtiene un post específico.
  - Params: id (ID del post)

- PUT /api/posts/:id: Edita un post existente.
  - Params: id (ID del post)
  - json: { content, files }

- DELETE /api/posts/:id: Elimina un post.
  - Params: id (ID del post)

- POST /api/posts/:id/like: Da like a un post.
  - Params: id (ID del post)
  - json: { userId }

- POST /api/posts/:id/repost: Repostea un post.
  - Params: id (ID del post)
  - json: { userId }

- POST /api/posts/:id/quote: Hace quote de un post.
  - Params: id (ID del post)
  - json: { userId, content }

## 4. Comentarios

- POST /api/posts/:id/comments: Comenta en un post.
  - Params: id (ID del post)
  - json: { userId, content }

- GET /api/posts/:id/comments: Obtiene todos los comentarios de un post.
  - Params: id (ID del post)

## 5. Feeds y Recomendaciones

- GET /api/feed/for-you: Obtiene el feed personalizado "For You".
  - Query params: { userId }

- GET /api/feed/following: Obtiene el feed de personas seguidas.
  - Query params: { userId }

## 6. Moments (Historias que duran 24 horas)

- POST /api/moments: Crea un nuevo moment.
  - json: { content, files, userId }

- GET /api/moments/:userId: Obtiene todos los moments de un usuario específico.
  - Params: userId (ID del usuario)

- DELETE /api/moments/:id: Elimina un moment después de 24 horas (automático o manual).
  - Params: id (ID del moment)

## 7. Mensajes y Notificaciones

- POST /api/messages: Envía un mensaje a otro usuario.
  - json: { senderId, receiverId, content }

- GET /api/messages/:userId: Obtiene todos los mensajes para un usuario específico.
  - Params: userId (ID del usuario)

- POST /api/notifications: Crea una notificación para un usuario.
  - json: { userId, type, data }

- GET /api/notifications/:userId: Obtiene todas las notificaciones de un usuario.
  - Params: userId (ID del usuario)

## 8. Recomendaciones y Tendencias (Trending)

- GET /api/recommendations/users: Obtiene recomendaciones de usuarios a seguir.
  - Query params: { userId }

- GET /api/recommendations/posts: Obtiene recomendaciones de posts.
  - Query params: { userId }

- GET /api/trending: Obtiene las tendencias de hashtags, palabras, o temas actuales.
  - Query params: { limit }

---

# Resumen de Tecnologías y Librerías

Cada ruta puede usar tecnologías específicas que ya discutimos, como:

- Autenticación y Autorización: NextAuth con posibles API keys y JWT para asegurar rutas privadas.
- Cacheo de Respuestas: Redis, para mejorar la carga de los feeds.
- Optimización de Consultas: Mongoose (MongoDB) con índices, sharding y agregaciones.
- Actualizaciones en Tiempo Real: WebSockets (o librerías como Socket.IO) para notificaciones y mensajes.
- IA y Machine Learning: Modelos NLP para la generación de etiquetas automáticas y recomendadores.
- Manejo de Archivos: Almacenamiento en la nube (S3 o GCP) para archivos de multimedia en posts y moments.